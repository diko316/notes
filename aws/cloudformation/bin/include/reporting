#!/bin/sh -e

###############################################
# Local Variables
###############################################
BUILD_STEP_STACK='[]'
BUILD_STEP=1
LOG_FILE=

###############################################
# Build step functions
###############################################
get_build_step() {
  local STACK_STEP

  if [ "$(echo ${BUILD_STEP_STACK} | jq -r '.|length')" -gt 0 ]; then
    while read STACK_STEP; do
      printf "%s." ${STACK_STEP}
    done <<STACK_STEP_LIST
$(echo ${BUILD_STEP_STACK} | jq -r '.[]')
STACK_STEP_LIST

  fi

  echo "${BUILD_STEP}"
}

build_step_push() {
  BUILD_STEP_STACK=$(echo ${BUILD_STEP_STACK} | jq -c ".[.|length] = ${BUILD_STEP}")
  BUILD_STEP=1

  return 0
}

build_step_pop() {
  local STACK_LENGTH=$(echo ${BUILD_STEP_STACK} | jq -r '.|length')

  # nothing to pop
  [ "${STACK_LENGTH}" -eq 0 ] && return 0

  # get last
  STACK_LENGTH=$((${STACK_LENGTH} - 1))

  BUILD_STEP=$(echo ${BUILD_STEP_STACK} | jq -r ".[${STACK_LENGTH}]")
  BUILD_STEP_STACK=$(echo ${BUILD_STEP_STACK} | jq -c "del(.[${STACK_LENGTH}])")

  return 0
}

build_step_iterate() {
  BUILD_STEP=$((${BUILD_STEP} + 1))
}

###############################################
# Reporting functions
###############################################

#----------------------------------------------
# set_log_file [log file path]
#----------------------------------------------
set_log_file() {
  local TRY_FILE=$1

  [ "[${TRY_FILE}]" = "[]" ] && return 0
  [ -f ${TRY_FILE} ] || return 0
  
  LOG_FILE=${TRY_FILE}
  return 0
}

#----------------------------------------------
# log_output
#----------------------------------------------
log_output() {
  local HAS_LOGFILE=0
  while read OUTPUT; do
    if [ "[${LOG_FILE}]" = "[]" ]; then
      echo "${OUTPUT}" >&2
    else
      echo "${OUTPUT}" | tee -a ${LOG_FILE} >&2
    fi 
  done <&0
  return 0
}

#----------------------------------------------
# report_output
#----------------------------------------------
report_output() {
  local OUTPUT
  while read OUTPUT; do
    if [ "[${OUTPUT}]" = "[]" ]; then
      echo "" | log_output
    else
      echo "* ${OUTPUT}" | log_output
    fi
  done <&0
}

#----------------------------------------------
# report_topic [...message]
#----------------------------------------------
report_topic() {
  [ $# -eq 0 ] && return 0

  cat <<MESSAGE_LIST | log_output

************************************
*
* $@
*
************************************
* $(date '+%D %T')

MESSAGE_LIST

  return 0
}

#----------------------------------------------
# report_error [exit code] [...message]
#----------------------------------------------
report_error() {
  local EXIT_CODE=$1
  [ $# -gt 0 ] && shift 1

  cat <<ERROR_MESSAGE | log_output

* [error] ${@}

ERROR_MESSAGE

  [ "[${EXIT_CODE}]" = "[]" ] && exit 1
  [ "${EXIT_CODE}" -gt 0 ] >/dev/null 2>&1 && exit ${EXIT_CODE}
  return 0
}

#----------------------------------------------
# report_log [...message]
#----------------------------------------------
report_log() {
  [ $# -eq 0 ] && return 0

  cat <<MESSAGE_LIST | log_output
* $@

MESSAGE_LIST

  return 0
}

#----------------------------------------------
# report_warning [...message]
#----------------------------------------------
report_warning() {
  [ $# -eq 0 ] && return 0

  cat <<MESSAGE_LIST | log_output

* [warning] $@

MESSAGE_LIST

  return 0
}

#----------------------------------------------
# log_step [...message]
#----------------------------------------------
log_step() {
  [ $# -eq 0 ] && return 0

  cat <<MESSAGE_LIST | log_output

------------------------------------
$(get_build_step). $@
------------------------------------
** $(date '+%D %T')

MESSAGE_LIST

  return 0
}

#----------------------------------------------
# report_step [...message]
#----------------------------------------------
report_step() {
  log_step $@
  build_step_iterate
}

#----------------------------------------------
# report_sub_step [...message]
#----------------------------------------------
report_sub_step() {
  log_step $@
  build_step_push
}

#----------------------------------------------
# report_last_step [...message]
#----------------------------------------------
report_last_step() {
  log_step $@
  build_step_pop
  build_step_iterate
}