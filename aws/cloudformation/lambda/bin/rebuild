#!/bin/sh -e

. $(dirname $(realpath -m $0))/.initialize

########################################################
# 1. Cleanup
########################################################
CLEANED_PACKAGE=${MAIN_PACKAGE}-cleaned
CLEANED_PACKAGE_CACHE=${CLEANED_PACKAGE}-cache
cat ${MAIN_PACKAGE} > ${CLEANED_PACKAGE}

while read PACKAGE_NAME; do
  PACKAGE_SOURCE=$(cat ${MAIN_PACKAGE} | jq -r ".dependencies.\"${PACKAGE_NAME}\"")

  if echo ${PACKAGE_SOURCE} | grep -q '^file:lib'; then
    cat ${CLEANED_PACKAGE} | \
      jq "del(.dependencies.\"${PACKAGE_NAME}\")" > ${CLEANED_PACKAGE_CACHE}
    mv -f ${CLEANED_PACKAGE_CACHE} ${CLEANED_PACKAGE}
  fi
done <<PACKAGE_LIST
  $(cat ${MAIN_PACKAGE} | jq -r '.dependencies | keys[]')
PACKAGE_LIST

mv -f ${CLEANED_PACKAGE} ${MAIN_PACKAGE}

########################################################
# 2. Rebuild
########################################################
while read PACKAGE_NAME; do
  PACKAGE_DIR=${LAYER_DIR}/${PACKAGE_NAME}
  PACKAGE_MANIFEST=${PACKAGE_DIR}/package.json
  PACKAGE_FULL_NAME="@${STACK_NAME}/${PACKAGE_NAME}"
  PACKAGE_SOURCE="file:lib/${PACKAGE_NAME}"

  # create package manifest if do not exist
  if [ ! -f ${PACKAGE_MANIFEST} ]; then
    cat <<PACKAGE_MANIFEST > ${PACKAGE_DIR}/package.json
{
  "name": "${PACKAGE_FULL_NAME}",
  "version": "${PACKAGE_VERSION}",
  "description": "Layer package: ${PACKAGE_NAME}",
  "main": "index.js",
  "private": true,
  "license": "ISC"
}
PACKAGE_MANIFEST

  # rebuild package manifest
  else
    cat ${PACKAGE_MANIFEST} | \
      jq ".name = \"${PACKAGE_FULL_NAME}\"" | \
      jq ".version = \"${PACKAGE_VERSION}\"" > ${CLEANED_PACKAGE}

    mv -f ${CLEANED_PACKAGE} ${PACKAGE_MANIFEST}
  fi

  # add to package.json
  cat ${MAIN_PACKAGE} | \
    jq ".dependencies.\"${PACKAGE_FULL_NAME}\" = \"${PACKAGE_SOURCE}\"" > ${CLEANED_PACKAGE}

  mv -f ${CLEANED_PACKAGE} ${MAIN_PACKAGE}

done <<PACKAGE_LIST
$(ls -1 ${LAYER_DIR})
PACKAGE_LIST

npm install -y
. $(dirname $(realpath -m $0))/.initialize
