#!/bin/sh -e

export TOOL_DIR=$(dirname $(realpath -m $0))
export ROOT_DIR=$(dirname ${TOOL_DIR})

export DIST_DIR=${ROOT_DIR}/dist
export LAYER_DIR=${ROOT_DIR}/lib
export BUILD_LOG=${DIST_DIR}/build.log
export MAIN_PACKAGE=${ROOT_DIR}/package.json
export MAIN_PACKAGE_LOCK=${ROOT_DIR}/package-lock.json

cd ${ROOT_DIR}

# initialize if not yet initialized
[ -f ${MAIN_PACKAGE} ] || npm init || exit $?

# finalize stackname
CACHE_STACK_NAME=$(cat ${MAIN_PACKAGE} | jq -r ".name")
CACHE_PACKAGE_VERSION=$(cat ${MAIN_PACKAGE} | jq -r ".version")

# use default stack name
[ "[${CACHE_STACK_NAME}]" = "[null]" ] && CACHE_STACK_NAME=$(basename ${ROOT_DIR})
[ "[${CACHE_PACKAGE_VERSION}]" = "[null]" ] && CACHE_PACKAGE_VERSION="1.0.0"

export STACK_NAME=${CACHE_STACK_NAME}
export PACKAGE_VERSION=${CACHE_PACKAGE_VERSION}

report_error() {
  EXIT_CODE=$1
  [ $# -gt 0 ] && shift 1

  cat <<MESSAGE | tee -a ${BUILD_LOG} >&2

!! ${@}

MESSAGE

  exit ${EXIT_CODE}
}

report_log() {
  cat <<MESSAGE | tee -a ${BUILD_LOG} >&2

!! ${@}

MESSAGE

  return 0
}

# initialize log
if [ ! -f ${BUILD_LOG} ]; then
  mkdir -p $(dirname ${BUILD_LOG})
  touch ${BUILD_LOG}
fi
